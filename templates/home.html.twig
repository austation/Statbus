{% extends 'base/page.html.twig' %}
{% block breadcrumbs %}{% endblock %}
{% block cardHeader %}
	Statbus
{% endblock %}
{% block header %}
<div class="container position-relative mt-5">
<div id="polytalk" class="d-flex">
		<div style="padding-top: 10px">
			<strong>[Engineering] Poly</strong>
			says, "<span id="polyLine" data-server="{{server}}">I have opinions!</span>"</div><img src="img/poly.png"/>
	</div>
</div>
{% endblock %}
{% block cardBody %}
	<div class="row mb-4">
		<div class="col-lg-9 mb-4">
			<div class="grid gap-3">
				{% if not user %}
					<a href="{{url_for('warning')}}" class="btn btn-warning  d-flex justify-content-between align-items-center text-white g-col-12 g-col-md-4 g-col-lg-3">
						<span class="h1 m-0 me-2">
							<i class="fas fa-triangle-exclamation"></i>
						</span>
						<span class="h6 m-0 fw-bold text-end">Content Warning</span>
					</a>
				{% endif %}
				{% if user.has('ADMIN') %}
					<a href="{{url_for('tgdb')}}" class="btn btn-danger  d-flex justify-content-between align-items-center {{a.disabled ? 'disabled'}} g-col-12 g-col-md-4 g-col-lg-3">
						<span class="h1 m-0">
							<i class="fas fa-shield-halved"></i>
						</span>
						<span class="h6 m-0 fw-bold text-end">TGDB</span>
					</a>
				{% endif %}
				{% for a in apps %}
					<a href="{{a.url}}" class="btn btn-primary  d-flex justify-content-between align-items-center {{a.disabled ? 'disabled'}} g-col-12 g-col-md-4 g-col-lg-3">
						<span class="h1 m-0 me-2">
							<i class="{{a.icon}}"></i>
						</span>
						<span class="h6 m-0 fw-bold text-end">{{a.name}}</span>
					</a>
				{% endfor %}
			</div>
		</div>
		<div class="col-lg-3">
			{% include 'home/components/' ~ fun.template with {'data' :fun.data} only %}
		</div>
	</div>

	{% include 'round/components/tableList.html.twig' %}

	<script>
		const polylineEl = document.getElementById('polyLine')
const server = polylineEl.dataset.server
async function loadPoly() {
const response = await fetch (`https://tgstation13.org/parsed-logs/${server}/data/npc_saves/polytalk.json`);
const lines = await response.json();
let len = lines.data.length;
let rand = Math.floor(Math.random() * (len - 1))
let line = lines.data[rand]
polylineEl.innerText = line
setInterval(() => {
let rand = Math.floor(Math.random() * (len - 1))
polylineEl.innerText = lines.data[rand]
}, 2000);
}
loadPoly()
	</script>
{% endblock %}
